
Found test files Atomic:
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Multiplication
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Equal
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Subtraction
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/EOF
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Addition
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/ToINT
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Division
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/NotEqual
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/GreaterLessThanEquals
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/GreaterLessThan
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Modulo
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/ToDOUBLE

Found test files Complex:
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/ComplexTests/quadraticFormular

Found test files Interpreted:
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Multiplication
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Subtraction
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/TwoOps
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Addition
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Division
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/ManyOps
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Modulo
/home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/SemanticFail
ATOMIC TESTS

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Multiplication
With text: 
int main() {
    /*This is a comment*/
    int a = 7;
    int b = 4;
    double c = 3.0;
    double d = 2.5;
    int INTRes;
    double DOUBLERes;

    INTRes = a * b;
    DOUBLERes = c * d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"7"
";"
"int"
"b"
"="
"4"
";"
"double"
"c"
"="
"3.0"
";"
"double"
"d"
"="
"2.5"
";"
"int"
"INTRes"
";"
"double"
"DOUBLERes"
";"
"INTRes"
"="
"a"
"*"
"b"
";"
"DOUBLERes"
"="
"c"
"*"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(7))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(7))

Parsing non-terminal: RelEx
Current token: Type(IntVal(7))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(7))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(7))

Parsing non-terminal: Number
Current token: Type(IntVal(7))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(4))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(4))

Parsing non-terminal: RelEx
Current token: Type(IntVal(4))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(4))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(4))

Parsing non-terminal: Number
Current token: Type(IntVal(4))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Times)

Parsing non-terminal: ArithExP
Current token: Ops(Times)

Parsing non-terminal: ArithOp
Current token: Ops(Times)

Parsing non-terminal: ArithOpP
Current token: Ops(Times)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Times)

Parsing non-terminal: ArithExP
Current token: Ops(Times)

Parsing non-terminal: ArithOp
Current token: Ops(Times)

Parsing non-terminal: ArithOpP
Current token: Ops(Times)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(7))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(4))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("3.0"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("2.5"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    NonTerminal: ArithOpP
                                      Symbol: Ops(Times)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      NonTerminal: ArithOpP
                                        Symbol: Ops(Times)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"c": "double", "INTRes": "int", "DOUBLERes": "double", "main": "int", "a": "int", "b": "int", "d": "double"}

--------------------

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Equal
With text: 
int main() {
    int a = 2;
    int b = 1;
    int c = 2;

    double d = 1.0;
    double e = 2.5;
    double f = 1.0;

    if(a == b) {
        print("int false")
    }
    if(a == c) {
        print("int true")
    }
    if(d == e) {
        print("double false")
    }
    if(d == f) {
        print("double true")
    }

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"int"
"c"
"="
"2"
";"
"double"
"d"
"="
"1.0"
";"
"double"
"e"
"="
"2.5"
";"
"double"
"f"
"="
"1.0"
";"
"if"
"("
"a"
"=="
"b"
")"
"{"
"print"
"("
"\"int"
"false"
"\""
")"
"}"
"if"
"("
"a"
"=="
"c"
")"
"{"
"print"
"("
"\"int"
"true"
"\""
")"
"}"
"if"
"("
"d"
"=="
"e"
")"
"{"
"print"
"("
"\"double"
"false"
"\""
")"
"}"
"if"
"("
"d"
"=="
"f"
")"
"{"
"print"
"("
"\"double"
"true"
"\""
")"
"}"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("e"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("f"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: ControlFlow(If)

Parsing non-terminal: Statement
Current token: ControlFlow(If)

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: BinaryOps(Equal)

Parsing non-terminal: ArithExP
Current token: BinaryOps(Equal)

Parse error: No production rule for non-terminal ArithExP with token BinaryOps(Equal)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Subtraction
With text: 
int main() {
    /*This is a comment*/
    int a = 2;
    int b = 1;
    double c = 1.0;
    double d = 2.5;
    int INTRes;
    double DOUBLERes;

    INTRes = a - b;
    DOUBLERes = c - d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"double"
"c"
"="
"1.0"
";"
"double"
"d"
"="
"2.5"
";"
"int"
"INTRes"
";"
"double"
"DOUBLERes"
";"
"INTRes"
"="
"a"
"-"
"b"
";"
"DOUBLERes"
"="
"c"
"-"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Minus)

Parsing non-terminal: ArithExP
Current token: Ops(Minus)

Parsing non-terminal: ArithOp
Current token: Ops(Minus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Minus)

Parsing non-terminal: ArithExP
Current token: Ops(Minus)

Parsing non-terminal: ArithOp
Current token: Ops(Minus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(2))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(1))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("1.0"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("2.5"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    Symbol: Ops(Minus)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      Symbol: Ops(Minus)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"DOUBLERes": "double", "b": "int", "main": "int", "d": "double", "INTRes": "int", "c": "double", "a": "int"}

--------------------

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/EOF
With text: 
int main() {}
"int"
"main"
"("
")"
"{"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"main": "int"}

--------------------

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Addition
With text: 
int main() {
    /*This is a comment*/
    int a = 2;
    int b = 1;
    double c = 1.0;
    double d = 2.5;

    int INTRes = 0;
    double DOUBLERes = 0;

    INTRes = a + b;
    DOUBLERes = c + d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"double"
"c"
"="
"1.0"
";"
"double"
"d"
"="
"2.5"
";"
"int"
"INTRes"
"="
"0"
";"
"double"
"DOUBLERes"
"="
"0"
";"
"INTRes"
"="
"a"
"+"
"b"
";"
"DOUBLERes"
"="
"c"
"+"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(2))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(1))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("1.0"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("2.5"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: Number
                                    Symbol: Type(IntVal(0))
                                NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    Symbol: Ops(Plus)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      Symbol: Ops(Plus)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"b": "int", "main": "int", "c": "double", "d": "double", "DOUBLERes": "double", "INTRes": "int", "a": "int"}

--------------------

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/ToINT
With text: 
int main() {
    /*This is a comment*/
    int a = 2.1;
    int DOUBLERes;

    DOUBLERes = ToINT(a);

    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2.1"
";"
"int"
"DOUBLERes"
";"
"DOUBLERes"
"="
"ToINT"
"("
"a"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.1"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.1"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.1"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.1"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.1"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.1"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("ToINT"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("ToINT"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("ToINT"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("ToINT"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("ToINT"))

Parsing non-terminal: String
Current token: Variable(VarName("ToINT"))

Parsing non-terminal: VName
Current token: Variable(VarName("ToINT"))

Parsing non-terminal: StringP
Current token: Scope(BracketL)

Parsing non-terminal: ArgList
Current token: Variable(VarName("a"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: ArithExP
Current token: Scope(BracketR)

Parsing non-terminal: RelExP
Current token: Scope(BracketR)

Parsing non-terminal: BoolExP
Current token: Scope(BracketR)

Parsing non-terminal: ArgListTail
Current token: Scope(BracketR)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(DoubleVal("2.1"))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("DOUBLERes"))
              NonTerminal: VarDeclP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: Assignment
                NonTerminal: VName
                  Symbol: Variable(VarName("DOUBLERes"))
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: String
                            NonTerminal: VName
                              Symbol: Variable(VarName("ToINT"))
                            NonTerminal: StringP
                              Symbol: Scope(BracketL)
                              NonTerminal: ArgList
                                NonTerminal: Ex
                                  NonTerminal: BoolEx
                                    NonTerminal: RelEx
                                      NonTerminal: ArithEx
                                        NonTerminal: ArithVal
                                          NonTerminal: String
                                            NonTerminal: VName
                                              Symbol: Variable(VarName("a"))
                                            NonTerminal: StringP
                                        NonTerminal: ArithExP
                                      NonTerminal: RelExP
                                    NonTerminal: BoolExP
                                NonTerminal: ArgListTail
                              Symbol: Scope(BracketR)
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                Symbol: Utilities(Print)
                Symbol: Scope(BracketL)
                NonTerminal: Text
                  NonTerminal: TextElement
                    NonTerminal: String
                      NonTerminal: VName
                        Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: StringP
                  NonTerminal: TextTail
                Symbol: Scope(BracketR)
                Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  Symbol: ControlFlow(Return)
                  NonTerminal: ReturnTail
                    NonTerminal: Number
                      Symbol: Type(IntVal(0))
                  Symbol: Scope(Semi)
                NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Failed with Errors:
Use of undeclared variable 'ToINT'.

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Division
With text: 
int main() {
    /*This should be able handle in / where a remanded occurs*/
    int a = 26;
    int b = 5;
    double c = 8.4;
    double d = 2.0;
    int INTRes;
    double DOUBLERes;

    INTRes = a / b;
    DOUBLERes = c / d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"26"
";"
"int"
"b"
"="
"5"
";"
"double"
"c"
"="
"8.4"
";"
"double"
"d"
"="
"2.0"
";"
"int"
"INTRes"
";"
"double"
"DOUBLERes"
";"
"INTRes"
"="
"a"
"/"
"b"
";"
"DOUBLERes"
"="
"c"
"/"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(26))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(26))

Parsing non-terminal: RelEx
Current token: Type(IntVal(26))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(26))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(26))

Parsing non-terminal: Number
Current token: Type(IntVal(26))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(5))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(5))

Parsing non-terminal: RelEx
Current token: Type(IntVal(5))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(5))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(5))

Parsing non-terminal: Number
Current token: Type(IntVal(5))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Divide)

Parsing non-terminal: ArithExP
Current token: Ops(Divide)

Parsing non-terminal: ArithOp
Current token: Ops(Divide)

Parsing non-terminal: ArithOpP
Current token: Ops(Divide)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Divide)

Parsing non-terminal: ArithExP
Current token: Ops(Divide)

Parsing non-terminal: ArithOp
Current token: Ops(Divide)

Parsing non-terminal: ArithOpP
Current token: Ops(Divide)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(26))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(5))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("8.4"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("2.0"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    NonTerminal: ArithOpP
                                      Symbol: Ops(Divide)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      NonTerminal: ArithOpP
                                        Symbol: Ops(Divide)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"a": "int", "main": "int", "d": "double", "DOUBLERes": "double", "c": "double", "INTRes": "int", "b": "int"}

--------------------

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/NotEqual
With text: 
int main() {
    int a = 2;
    int b = 1;
    int c = 2;

    double d = 1.0;
    double e = 2.5;
    double f = 1.0;

    if(a <> b) {
        print("int true")
    }
    if(a <> c) {
        print("int false")
    }
    if(d <> e) {
        print("double true")
    }
    if(d <> f) {
        print("double false")
    }

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"int"
"c"
"="
"2"
";"
"double"
"d"
"="
"1.0"
";"
"double"
"e"
"="
"2.5"
";"
"double"
"f"
"="
"1.0"
";"
"if"
"("
"a"
"<>"
"b"
")"
"{"
"print"
"("
"\"int"
"true"
"\""
")"
"}"
"if"
"("
"a"
"<>"
"c"
")"
"{"
"print"
"("
"\"int"
"false"
"\""
")"
"}"
"if"
"("
"d"
"<>"
"e"
")"
"{"
"print"
"("
"\"double"
"true"
"\""
")"
"}"
"if"
"("
"d"
"<>"
"f"
")"
"{"
"print"
"("
"\"double"
"false"
"\""
")"
"}"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("e"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("f"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: ControlFlow(If)

Parsing non-terminal: Statement
Current token: ControlFlow(If)

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: BinaryOps(NotEqual)

Parsing non-terminal: ArithExP
Current token: BinaryOps(NotEqual)

Parse error: No production rule for non-terminal ArithExP with token BinaryOps(NotEqual)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/GreaterLessThanEquals
With text: 
int main() {
    int a = 2;
    int b = 1;

    double c = 1.0;
    double d = 2.5;

    if(a >= b) {
        print("int true")
    }
    if(a <= b) {
        print("int false")
    }
    if(c >= d) {
        print("double false")
    }
    if(c <= d) {
        print("double true")
    }

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"double"
"c"
"="
"1.0"
";"
"double"
"d"
"="
"2.5"
";"
"if"
"("
"a"
">="
"b"
")"
"{"
"print"
"("
"\"int"
"true"
"\""
")"
"}"
"if"
"("
"a"
"<="
"b"
")"
"{"
"print"
"("
"\"int"
"false"
"\""
")"
"}"
"if"
"("
"c"
">="
"d"
")"
"{"
"print"
"("
"\"double"
"false"
"\""
")"
"}"
"if"
"("
"c"
"<="
"d"
")"
"{"
"print"
"("
"\"double"
"true"
"\""
")"
"}"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: ControlFlow(If)

Parsing non-terminal: Statement
Current token: ControlFlow(If)

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: BinaryOps(GreaterThanEqual)

Parsing non-terminal: ArithExP
Current token: BinaryOps(GreaterThanEqual)

Parse error: No production rule for non-terminal ArithExP with token BinaryOps(GreaterThanEqual)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/GreaterLessThan
With text: 
int main() {
    int a = 2;
    int b = 1;

    double c = 1.0;
    double d = 2.5;

    if(a > b) {
        print("int true")
    }
    if(a < b) {
        print("int false")
    }
    if(c > d) {
        print("double false")
    }
    if(c < d) {
        print("double true")
    }

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"double"
"c"
"="
"1.0"
";"
"double"
"d"
"="
"2.5"
";"
"if"
"("
"a"
">"
"b"
")"
"{"
"print"
"("
"\"int"
"true"
"\""
")"
"}"
"if"
"("
"a"
"<"
"b"
")"
"{"
"print"
"("
"\"int"
"false"
"\""
")"
"}"
"if"
"("
"c"
">"
"d"
")"
"{"
"print"
"("
"\"double"
"false"
"\""
")"
"}"
"if"
"("
"c"
"<"
"d"
")"
"{"
"print"
"("
"\"double"
"true"
"\""
")"
"}"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: ControlFlow(If)

Parsing non-terminal: Statement
Current token: ControlFlow(If)

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: BinaryOps(GreaterThan)

Parsing non-terminal: ArithExP
Current token: BinaryOps(GreaterThan)

Parse error: No production rule for non-terminal ArithExP with token BinaryOps(GreaterThan)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/Modulo
With text: 
int main() {
    /*This is a comment*/
    int a = 33;
    int b = 10;
    double c = 10.25;
    double d = 10.00;
    int INTRes;
    double DOUBLERes;

    INTRes = a % b;
    DOUBLERes = c % d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"33"
";"
"int"
"b"
"="
"10"
";"
"double"
"c"
"="
"10.25"
";"
"double"
"d"
"="
"10.00"
";"
"int"
"INTRes"
";"
"double"
"DOUBLERes"
";"
"INTRes"
"="
"a"
"%"
"b"
";"
"DOUBLERes"
"="
"c"
"%"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(33))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(33))

Parsing non-terminal: RelEx
Current token: Type(IntVal(33))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(33))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(33))

Parsing non-terminal: Number
Current token: Type(IntVal(33))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(10))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(10))

Parsing non-terminal: RelEx
Current token: Type(IntVal(10))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(10))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(10))

Parsing non-terminal: Number
Current token: Type(IntVal(10))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Modulo)

Parsing non-terminal: ArithExP
Current token: Ops(Modulo)

Parsing non-terminal: ArithOp
Current token: Ops(Modulo)

Parsing non-terminal: ArithOpP
Current token: Ops(Modulo)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Modulo)

Parsing non-terminal: ArithExP
Current token: Ops(Modulo)

Parsing non-terminal: ArithOp
Current token: Ops(Modulo)

Parsing non-terminal: ArithOpP
Current token: Ops(Modulo)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(33))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(10))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("10.25"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("10.00"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    NonTerminal: ArithOpP
                                      Symbol: Ops(Modulo)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      NonTerminal: ArithOpP
                                        Symbol: Ops(Modulo)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"c": "double", "d": "double", "DOUBLERes": "double", "a": "int", "INTRes": "int", "b": "int", "main": "int"}

--------------------

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/AtomicTests/ToDOUBLE
With text: 
int main() {
    int a = 2;
    int INTRes;

    INTRes = ToDOUBLE(a);

    print(INTRes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"INTRes"
";"
"INTRes"
"="
"ToDOUBLE"
"("
"a"
")"
";"
"print"
"("
"INTRes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("ToDOUBLE"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("ToDOUBLE"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("ToDOUBLE"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("ToDOUBLE"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("ToDOUBLE"))

Parsing non-terminal: String
Current token: Variable(VarName("ToDOUBLE"))

Parsing non-terminal: VName
Current token: Variable(VarName("ToDOUBLE"))

Parsing non-terminal: StringP
Current token: Scope(BracketL)

Parsing non-terminal: ArgList
Current token: Variable(VarName("a"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: ArithExP
Current token: Scope(BracketR)

Parsing non-terminal: RelExP
Current token: Scope(BracketR)

Parsing non-terminal: BoolExP
Current token: Scope(BracketR)

Parsing non-terminal: ArgListTail
Current token: Scope(BracketR)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(2))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("INTRes"))
              NonTerminal: VarDeclP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: Assignment
                NonTerminal: VName
                  Symbol: Variable(VarName("INTRes"))
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: String
                            NonTerminal: VName
                              Symbol: Variable(VarName("ToDOUBLE"))
                            NonTerminal: StringP
                              Symbol: Scope(BracketL)
                              NonTerminal: ArgList
                                NonTerminal: Ex
                                  NonTerminal: BoolEx
                                    NonTerminal: RelEx
                                      NonTerminal: ArithEx
                                        NonTerminal: ArithVal
                                          NonTerminal: String
                                            NonTerminal: VName
                                              Symbol: Variable(VarName("a"))
                                            NonTerminal: StringP
                                        NonTerminal: ArithExP
                                      NonTerminal: RelExP
                                    NonTerminal: BoolExP
                                NonTerminal: ArgListTail
                              Symbol: Scope(BracketR)
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                Symbol: Utilities(Print)
                Symbol: Scope(BracketL)
                NonTerminal: Text
                  NonTerminal: TextElement
                    NonTerminal: String
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                      NonTerminal: StringP
                  NonTerminal: TextTail
                Symbol: Scope(BracketR)
                Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  Symbol: ControlFlow(Return)
                  NonTerminal: ReturnTail
                    NonTerminal: Number
                      Symbol: Type(IntVal(0))
                  Symbol: Scope(Semi)
                NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Failed with Errors:
Use of undeclared variable 'ToDOUBLE'.

--------------------
COMPLEX TESTS

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/ComplexTests/quadraticFormular
With text: 
int main() {
    //This is a comment
    DOUBLE ValA = 2;
    DOUBLE ValB = 2;
    DOUBLE ValC = 1;

    DOUBLE real_val;
    DOUBLE img_val;
    //These should be the 2 ways variables can be declared, unless i have issues or run out of time

    DOUBLE in_the_sqrt = b * b - 4 * a * c;

    //example of an if statement
    if (in_the_sqrt > 0) {
        real_val = - b + SQRT(in_the_sqrt) / 2 * a;
        img_val = - b - SQRT(in_the_sqrt) / 2 * a;
    } else if (in_the_sqrt < 0) {
        real_val = - b / 2 * a;
        img_val = SQRT(-in_the_sqrt) / 2 * a;
    } else {
        real_val = -b / 2 * a;
        img_val = 0;
    }


    Print("\nThe Equation is: \n {0}x^2 + {1}x + {2} = 0 \n", ValA, ValB, ValC);
    
    //Print is done using '+' to concatenate
    if(img_val == 0){
        Print("The result is : x= " + real_val);
    } else {
        Print("The result is : x= " + real_val + img_val);
    }

    return 0; 
}
"int"
"main"
"("
")"
"{"
"DOUBLE"
"ValA"
"="
"2"
";"
"DOUBLE"
"ValB"
"="
"2"
";"
"DOUBLE"
"ValC"
"="
"1"
";"
"DOUBLE"
"real_val"
";"
"DOUBLE"
"img_val"
";"
"DOUBLE"
"in_the_sqrt"
"="
"b"
"*"
"b"
"-"
"4"
"*"
"a"
"*"
"c"
";"
"if"
"(in_the_sqrt"
">"
"0"
")"
"{"
"real_val"
"="
"-"
"b"
"+"
"SQRT"
"("
"in_the_sqrt"
")"
"/"
"2"
"*"
"a"
";"
"img_val"
"="
"-"
"b"
"-"
"SQRT"
"("
"in_the_sqrt"
")"
"/"
"2"
"*"
"a"
";"
"}"
"else"
"if"
"(in_the_sqrt"
"<"
"0"
")"
"{"
"real_val"
"="
"-"
"b"
"/"
"2"
"*"
"a"
";"
"img_val"
"="
"SQRT"
"("
"-in_the_sqrt"
")"
"/"
"2"
"*"
"a"
";"
"}"
"else"
"{"
"real_val"
"="
"-b"
"/"
"2"
"*"
"a"
";"
"img_val"
"="
"0"
";"
"}"
"Print"
"("
"\"\\nThe"
"Equation"
"is:"
"\\n"
"{0"
"}"
"x^2"
"+"
"{1"
"}"
"x"
"+"
"{2"
"}"
"="
"0"
"\\n"
"\""
","
"ValA"
","
"ValB"
","
"ValC"
")"
";"
"if"
"("
"img_val"
"=="
"0"
")"
"{"
"Print"
"("
"\"The"
"result"
"is"
":"
"x"
"="
"\""
"+"
"real_val"
")"
";"
"}"
"else"
"{"
"Print"
"("
"\"The"
"result"
"is"
":"
"x"
"="
"\""
"+"
"real_val"
"+"
"img_val"
")"
";"
"}"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLE"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLE"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLE"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLE"))

Parsing non-terminal: Ex
Current token: Ops(Assignment)

Parse error: No production rule for non-terminal Ex with token Ops(Assignment)

--------------------
INTERPRETER TESTS

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Multiplication
With text: 
int main() {
    /*This is a comment*/
    int a = 7;
    int b = 4;
    double c = 3.0;
    double d = 2.5;

    int INTRes = 0;
    double DOUBLERes = 0.0;

    INTRes = a * b;
    DOUBLERes = c * d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"7"
";"
"int"
"b"
"="
"4"
";"
"double"
"c"
"="
"3.0"
";"
"double"
"d"
"="
"2.5"
";"
"int"
"INTRes"
"="
"0"
";"
"double"
"DOUBLERes"
"="
"0.0"
";"
"INTRes"
"="
"a"
"*"
"b"
";"
"DOUBLERes"
"="
"c"
"*"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(7))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(7))

Parsing non-terminal: RelEx
Current token: Type(IntVal(7))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(7))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(7))

Parsing non-terminal: Number
Current token: Type(IntVal(7))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(4))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(4))

Parsing non-terminal: RelEx
Current token: Type(IntVal(4))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(4))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(4))

Parsing non-terminal: Number
Current token: Type(IntVal(4))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("3.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Times)

Parsing non-terminal: ArithExP
Current token: Ops(Times)

Parsing non-terminal: ArithOp
Current token: Ops(Times)

Parsing non-terminal: ArithOpP
Current token: Ops(Times)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Times)

Parsing non-terminal: ArithExP
Current token: Ops(Times)

Parsing non-terminal: ArithOp
Current token: Ops(Times)

Parsing non-terminal: ArithOpP
Current token: Ops(Times)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(7))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(4))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("3.0"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("2.5"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: Number
                                    Symbol: Type(DoubleVal("0.0"))
                                NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    NonTerminal: ArithOpP
                                      Symbol: Ops(Times)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      NonTerminal: ArithOpP
                                        Symbol: Ops(Times)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"b": "int", "d": "double", "INTRes": "int", "c": "double", "main": "int", "a": "int", "DOUBLERes": "double"}

--------------------
Processing node: NonTerminal(Prog)
Processing child 0 of StatementList: NonTerminal(FuncList)
Processing node: NonTerminal(FuncList)
Processing node: NonTerminal(FuncDecl)
Processing child 0 of StatementList: NonTerminal(Decl)
Processing node: NonTerminal(Decl)
Processing node: NonTerminal(Type)
Processing node: Terminal(Type(Int))
Processing node: NonTerminal(VName)
Processing node: Terminal(Variable(VarName("main")))
Processing child 1 of StatementList: Terminal(Scope(BracketL))
Processing node: Terminal(Scope(BracketL))
Processing child 2 of StatementList: NonTerminal(ListOfParams)
Processing node: NonTerminal(ListOfParams)
Processing child 3 of StatementList: Terminal(Scope(BracketR))
Processing node: Terminal(Scope(BracketR))
Processing child 4 of StatementList: Terminal(Scope(CurlyBracketL))
Processing node: Terminal(Scope(CurlyBracketL))
Processing child 5 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 7.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 7.0), "b": ("int", 4.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"c": ("double", 3.0), "a": ("int", 7.0), "b": ("int", 4.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"d": ("double", 2.5), "a": ("int", 7.0), "b": ("int", 4.0), "c": ("double", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"d": ("double", 2.5), "a": ("int", 7.0), "b": ("int", 4.0), "INTRes": ("int", 0.0), "c": ("double", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"d": ("double", 2.5), "a": ("int", 7.0), "b": ("int", 4.0), "INTRes": ("int", 0.0), "DOUBLERes": ("double", 0.0), "c": ("double", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"d": ("double", 2.5), "a": ("int", 7.0), "b": ("int", 4.0), "INTRes": ("int", 28.0), "DOUBLERes": ("double", 0.0), "c": ("double", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"d": ("double", 2.5), "a": ("int", 7.0), "b": ("int", 4.0), "INTRes": ("int", 28.0), "DOUBLERes": ("double", 7.5), "c": ("double", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 28
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 7.5
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: Terminal(ControlFlow(Return))
Processing node: NonTerminal(ReturnTail)
Processing node: NonTerminal(Number)
Processing node: Terminal(Type(IntVal(0)))
Processing node: Terminal(Scope(Semi))
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 6 of StatementList: Terminal(Scope(CurlyBracketR))
Processing node: Terminal(Scope(CurlyBracketR))
Processing node: NonTerminal(FuncList)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Subtraction
With text: 
int main() {
    /*This is a comment*/
    int a = 2;
    int b = 1;
    double c = 1.0;
    double d = 2.5;

    int INTRes = 0;
    double DOUBLERes = 0.0;

    INTRes = a - b;
    DOUBLERes = c - d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"double"
"c"
"="
"1.0"
";"
"double"
"d"
"="
"2.5"
";"
"int"
"INTRes"
"="
"0"
";"
"double"
"DOUBLERes"
"="
"0.0"
";"
"INTRes"
"="
"a"
"-"
"b"
";"
"DOUBLERes"
"="
"c"
"-"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Minus)

Parsing non-terminal: ArithExP
Current token: Ops(Minus)

Parsing non-terminal: ArithOp
Current token: Ops(Minus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Minus)

Parsing non-terminal: ArithExP
Current token: Ops(Minus)

Parsing non-terminal: ArithOp
Current token: Ops(Minus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(2))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(1))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("1.0"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("2.5"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: Number
                                    Symbol: Type(DoubleVal("0.0"))
                                NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    Symbol: Ops(Minus)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      Symbol: Ops(Minus)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"DOUBLERes": "double", "c": "double", "a": "int", "d": "double", "b": "int", "main": "int", "INTRes": "int"}

--------------------
Processing node: NonTerminal(Prog)
Processing child 0 of StatementList: NonTerminal(FuncList)
Processing node: NonTerminal(FuncList)
Processing node: NonTerminal(FuncDecl)
Processing child 0 of StatementList: NonTerminal(Decl)
Processing node: NonTerminal(Decl)
Processing node: NonTerminal(Type)
Processing node: Terminal(Type(Int))
Processing node: NonTerminal(VName)
Processing node: Terminal(Variable(VarName("main")))
Processing child 1 of StatementList: Terminal(Scope(BracketL))
Processing node: Terminal(Scope(BracketL))
Processing child 2 of StatementList: NonTerminal(ListOfParams)
Processing node: NonTerminal(ListOfParams)
Processing child 3 of StatementList: Terminal(Scope(BracketR))
Processing node: Terminal(Scope(BracketR))
Processing child 4 of StatementList: Terminal(Scope(CurlyBracketL))
Processing node: Terminal(Scope(CurlyBracketL))
Processing child 5 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 2.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 2.0), "b": ("int", 1.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 2.0), "b": ("int", 1.0), "c": ("double", 1.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 2.0), "d": ("double", 2.5), "b": ("int", 1.0), "c": ("double", 1.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 2.0), "d": ("double", 2.5), "INTRes": ("int", 0.0), "b": ("int", 1.0), "c": ("double", 1.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"DOUBLERes": ("double", 0.0), "a": ("int", 2.0), "d": ("double", 2.5), "INTRes": ("int", 0.0), "b": ("int", 1.0), "c": ("double", 1.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"DOUBLERes": ("double", 0.0), "a": ("int", 2.0), "d": ("double", 2.5), "INTRes": ("int", 1.0), "b": ("int", 1.0), "c": ("double", 1.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"DOUBLERes": ("double", -1.5), "a": ("int", 2.0), "d": ("double", 2.5), "INTRes": ("int", 1.0), "b": ("int", 1.0), "c": ("double", 1.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 1
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: -1.5
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: Terminal(ControlFlow(Return))
Processing node: NonTerminal(ReturnTail)
Processing node: NonTerminal(Number)
Processing node: Terminal(Type(IntVal(0)))
Processing node: Terminal(Scope(Semi))
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 6 of StatementList: Terminal(Scope(CurlyBracketR))
Processing node: Terminal(Scope(CurlyBracketR))
Processing node: NonTerminal(FuncList)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/TwoOps
With text: 
int main() {
    /*This is a comment*/
    int a = 6;
    int b = 1;
    int c = 3;

    int INTOne = 0;
    int INTTwo = 0;

    INTOne = a + b;
    INTTwo = a + b - c; 

    print(INTOne);
    print(INTTwo);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"6"
";"
"int"
"b"
"="
"1"
";"
"int"
"c"
"="
"3"
";"
"int"
"INTOne"
"="
"0"
";"
"int"
"INTTwo"
"="
"0"
";"
"INTOne"
"="
"a"
"+"
"b"
";"
"INTTwo"
"="
"a"
"+"
"b"
"-"
"c"
";"
"print"
"("
"INTOne"
")"
";"
"print"
"("
"INTTwo"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(6))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(6))

Parsing non-terminal: RelEx
Current token: Type(IntVal(6))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(6))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(6))

Parsing non-terminal: Number
Current token: Type(IntVal(6))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(3))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(3))

Parsing non-terminal: RelEx
Current token: Type(IntVal(3))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(3))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(3))

Parsing non-terminal: Number
Current token: Type(IntVal(3))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Ops(Minus)

Parsing non-terminal: ArithExP
Current token: Ops(Minus)

Parsing non-terminal: ArithOp
Current token: Ops(Minus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: String
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: String
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(6))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(1))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Int)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(IntVal(3))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Int)
                    NonTerminal: VName
                      Symbol: Variable(VarName("INTOne"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(IntVal(0))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTTwo"))
                    NonTerminal: VarDeclP
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: Assignment
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTOne"))
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("a"))
                                  NonTerminal: StringP
                              NonTerminal: ArithExP
                                NonTerminal: ArithOp
                                  Symbol: Ops(Plus)
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("b"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTTwo"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    Symbol: Ops(Plus)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                                      NonTerminal: ArithOp
                                        Symbol: Ops(Minus)
                                      NonTerminal: ArithEx
                                        NonTerminal: ArithVal
                                          NonTerminal: String
                                            NonTerminal: VName
                                              Symbol: Variable(VarName("c"))
                                            NonTerminal: StringP
                                        NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        Symbol: Utilities(Print)
                        Symbol: Scope(BracketL)
                        NonTerminal: Text
                          NonTerminal: TextElement
                            NonTerminal: String
                              NonTerminal: VName
                                Symbol: Variable(VarName("INTOne"))
                              NonTerminal: StringP
                          NonTerminal: TextTail
                        Symbol: Scope(BracketR)
                        Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTTwo"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: ControlFlow(Return)
                            NonTerminal: ReturnTail
                              NonTerminal: Number
                                Symbol: Type(IntVal(0))
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"a": "int", "b": "int", "main": "int", "c": "int", "INTTwo": "int", "INTOne": "int"}

--------------------
Processing node: NonTerminal(Prog)
Processing child 0 of StatementList: NonTerminal(FuncList)
Processing node: NonTerminal(FuncList)
Processing node: NonTerminal(FuncDecl)
Processing child 0 of StatementList: NonTerminal(Decl)
Processing node: NonTerminal(Decl)
Processing node: NonTerminal(Type)
Processing node: Terminal(Type(Int))
Processing node: NonTerminal(VName)
Processing node: Terminal(Variable(VarName("main")))
Processing child 1 of StatementList: Terminal(Scope(BracketL))
Processing node: Terminal(Scope(BracketL))
Processing child 2 of StatementList: NonTerminal(ListOfParams)
Processing node: NonTerminal(ListOfParams)
Processing child 3 of StatementList: Terminal(Scope(BracketR))
Processing node: Terminal(Scope(BracketR))
Processing child 4 of StatementList: Terminal(Scope(CurlyBracketL))
Processing node: Terminal(Scope(CurlyBracketL))
Processing child 5 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 6.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 6.0), "b": ("int", 1.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 6.0), "b": ("int", 1.0), "c": ("int", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"INTOne": ("int", 0.0), "a": ("int", 6.0), "b": ("int", 1.0), "c": ("int", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"INTOne": ("int", 0.0), "a": ("int", 6.0), "b": ("int", 1.0), "c": ("int", 3.0), "INTTwo": ("int", 0.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"INTOne": ("int", 7.0), "a": ("int", 6.0), "b": ("int", 1.0), "c": ("int", 3.0), "INTTwo": ("int", 0.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"INTOne": ("int", 7.0), "a": ("int", 6.0), "b": ("int", 1.0), "c": ("int", 3.0), "INTTwo": ("int", 4.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 7
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 4
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: Terminal(ControlFlow(Return))
Processing node: NonTerminal(ReturnTail)
Processing node: NonTerminal(Number)
Processing node: Terminal(Type(IntVal(0)))
Processing node: Terminal(Scope(Semi))
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 6 of StatementList: Terminal(Scope(CurlyBracketR))
Processing node: Terminal(Scope(CurlyBracketR))
Processing node: NonTerminal(FuncList)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Addition
With text: 
int main() {
    /*This is a comment*/
    int a = 2;
    int b = 1;
    double c = 1.0;
    double d = 2.5;

    int INTRes = 0;
    double DOUBLERes = 0.0;

    INTRes = a + b;
    DOUBLERes = c + d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"double"
"c"
"="
"1.0"
";"
"double"
"d"
"="
"2.5"
";"
"int"
"INTRes"
"="
"0"
";"
"double"
"DOUBLERes"
"="
"0.0"
";"
"INTRes"
"="
"a"
"+"
"b"
";"
"DOUBLERes"
"="
"c"
"+"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(2))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(1))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("1.0"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("2.5"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: Number
                                    Symbol: Type(DoubleVal("0.0"))
                                NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    Symbol: Ops(Plus)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      Symbol: Ops(Plus)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"d": "double", "INTRes": "int", "DOUBLERes": "double", "main": "int", "a": "int", "b": "int", "c": "double"}

--------------------
Processing node: NonTerminal(Prog)
Processing child 0 of StatementList: NonTerminal(FuncList)
Processing node: NonTerminal(FuncList)
Processing node: NonTerminal(FuncDecl)
Processing child 0 of StatementList: NonTerminal(Decl)
Processing node: NonTerminal(Decl)
Processing node: NonTerminal(Type)
Processing node: Terminal(Type(Int))
Processing node: NonTerminal(VName)
Processing node: Terminal(Variable(VarName("main")))
Processing child 1 of StatementList: Terminal(Scope(BracketL))
Processing node: Terminal(Scope(BracketL))
Processing child 2 of StatementList: NonTerminal(ListOfParams)
Processing node: NonTerminal(ListOfParams)
Processing child 3 of StatementList: Terminal(Scope(BracketR))
Processing node: Terminal(Scope(BracketR))
Processing child 4 of StatementList: Terminal(Scope(CurlyBracketL))
Processing node: Terminal(Scope(CurlyBracketL))
Processing child 5 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 2.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"b": ("int", 1.0), "a": ("int", 2.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"b": ("int", 1.0), "a": ("int", 2.0), "c": ("double", 1.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 2.0), "b": ("int", 1.0), "c": ("double", 1.0), "d": ("double", 2.5)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"INTRes": ("int", 0.0), "a": ("int", 2.0), "b": ("int", 1.0), "c": ("double", 1.0), "d": ("double", 2.5)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"INTRes": ("int", 0.0), "DOUBLERes": ("double", 0.0), "a": ("int", 2.0), "b": ("int", 1.0), "c": ("double", 1.0), "d": ("double", 2.5)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"INTRes": ("int", 3.0), "DOUBLERes": ("double", 0.0), "a": ("int", 2.0), "b": ("int", 1.0), "c": ("double", 1.0), "d": ("double", 2.5)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"INTRes": ("int", 3.0), "DOUBLERes": ("double", 3.5), "a": ("int", 2.0), "b": ("int", 1.0), "c": ("double", 1.0), "d": ("double", 2.5)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 3
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 3.5
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: Terminal(ControlFlow(Return))
Processing node: NonTerminal(ReturnTail)
Processing node: NonTerminal(Number)
Processing node: Terminal(Type(IntVal(0)))
Processing node: Terminal(Scope(Semi))
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 6 of StatementList: Terminal(Scope(CurlyBracketR))
Processing node: Terminal(Scope(CurlyBracketR))
Processing node: NonTerminal(FuncList)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Division
With text: 
int main() {
    /*This should be able handle in / where a remanded occurs*/
    int a = 26;
    int b = 5;
    double c = 8.4;
    double d = 2.0;

    int INTRes = 0;
    double DOUBLERes = 0.0;

    INTRes = a / b;
    DOUBLERes = c / d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"26"
";"
"int"
"b"
"="
"5"
";"
"double"
"c"
"="
"8.4"
";"
"double"
"d"
"="
"2.0"
";"
"int"
"INTRes"
"="
"0"
";"
"double"
"DOUBLERes"
"="
"0.0"
";"
"INTRes"
"="
"a"
"/"
"b"
";"
"DOUBLERes"
"="
"c"
"/"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(26))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(26))

Parsing non-terminal: RelEx
Current token: Type(IntVal(26))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(26))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(26))

Parsing non-terminal: Number
Current token: Type(IntVal(26))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(5))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(5))

Parsing non-terminal: RelEx
Current token: Type(IntVal(5))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(5))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(5))

Parsing non-terminal: Number
Current token: Type(IntVal(5))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("8.4"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Divide)

Parsing non-terminal: ArithExP
Current token: Ops(Divide)

Parsing non-terminal: ArithOp
Current token: Ops(Divide)

Parsing non-terminal: ArithOpP
Current token: Ops(Divide)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Divide)

Parsing non-terminal: ArithExP
Current token: Ops(Divide)

Parsing non-terminal: ArithOp
Current token: Ops(Divide)

Parsing non-terminal: ArithOpP
Current token: Ops(Divide)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(26))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(5))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("8.4"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("2.0"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: Number
                                    Symbol: Type(DoubleVal("0.0"))
                                NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    NonTerminal: ArithOpP
                                      Symbol: Ops(Divide)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      NonTerminal: ArithOpP
                                        Symbol: Ops(Divide)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"INTRes": "int", "b": "int", "a": "int", "main": "int", "d": "double", "DOUBLERes": "double", "c": "double"}

--------------------
Processing node: NonTerminal(Prog)
Processing child 0 of StatementList: NonTerminal(FuncList)
Processing node: NonTerminal(FuncList)
Processing node: NonTerminal(FuncDecl)
Processing child 0 of StatementList: NonTerminal(Decl)
Processing node: NonTerminal(Decl)
Processing node: NonTerminal(Type)
Processing node: Terminal(Type(Int))
Processing node: NonTerminal(VName)
Processing node: Terminal(Variable(VarName("main")))
Processing child 1 of StatementList: Terminal(Scope(BracketL))
Processing node: Terminal(Scope(BracketL))
Processing child 2 of StatementList: NonTerminal(ListOfParams)
Processing node: NonTerminal(ListOfParams)
Processing child 3 of StatementList: Terminal(Scope(BracketR))
Processing node: Terminal(Scope(BracketR))
Processing child 4 of StatementList: Terminal(Scope(CurlyBracketL))
Processing node: Terminal(Scope(CurlyBracketL))
Processing child 5 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 26.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 26.0), "b": ("int", 5.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"c": ("double", 8.4), "a": ("int", 26.0), "b": ("int", 5.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"c": ("double", 8.4), "a": ("int", 26.0), "b": ("int", 5.0), "d": ("double", 2.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"c": ("double", 8.4), "a": ("int", 26.0), "b": ("int", 5.0), "INTRes": ("int", 0.0), "d": ("double", 2.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"c": ("double", 8.4), "a": ("int", 26.0), "b": ("int", 5.0), "INTRes": ("int", 0.0), "DOUBLERes": ("double", 0.0), "d": ("double", 2.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"c": ("double", 8.4), "a": ("int", 26.0), "b": ("int", 5.0), "INTRes": ("int", 5.0), "DOUBLERes": ("double", 0.0), "d": ("double", 2.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"c": ("double", 8.4), "a": ("int", 26.0), "b": ("int", 5.0), "INTRes": ("int", 5.0), "DOUBLERes": ("double", 4.2), "d": ("double", 2.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 5
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 4.2
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: Terminal(ControlFlow(Return))
Processing node: NonTerminal(ReturnTail)
Processing node: NonTerminal(Number)
Processing node: Terminal(Type(IntVal(0)))
Processing node: Terminal(Scope(Semi))
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 6 of StatementList: Terminal(Scope(CurlyBracketR))
Processing node: Terminal(Scope(CurlyBracketR))
Processing node: NonTerminal(FuncList)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/ManyOps
With text: 
int main() {
    /*This is a comment*/
    int a = 6;
    int b = 1;
    int c = 3;

    int INTOne = 0;
    int INTTwo = 0;

    INTOne = a + b;
    INTTwo = a * b + c * 3;

    print(INTOne);
    print(INTTwo);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"6"
";"
"int"
"b"
"="
"1"
";"
"int"
"c"
"="
"3"
";"
"int"
"INTOne"
"="
"0"
";"
"int"
"INTTwo"
"="
"0"
";"
"INTOne"
"="
"a"
"+"
"b"
";"
"INTTwo"
"="
"a"
"*"
"b"
"+"
"c"
"*"
"3"
";"
"print"
"("
"INTOne"
")"
";"
"print"
"("
"INTTwo"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(6))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(6))

Parsing non-terminal: RelEx
Current token: Type(IntVal(6))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(6))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(6))

Parsing non-terminal: Number
Current token: Type(IntVal(6))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(3))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(3))

Parsing non-terminal: RelEx
Current token: Type(IntVal(3))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(3))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(3))

Parsing non-terminal: Number
Current token: Type(IntVal(3))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Times)

Parsing non-terminal: ArithExP
Current token: Ops(Times)

Parsing non-terminal: ArithOp
Current token: Ops(Times)

Parsing non-terminal: ArithOpP
Current token: Ops(Times)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Times)

Parsing non-terminal: ArithExP
Current token: Ops(Times)

Parsing non-terminal: ArithOp
Current token: Ops(Times)

Parsing non-terminal: ArithOpP
Current token: Ops(Times)

Parsing non-terminal: ArithEx
Current token: Type(IntVal(3))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(3))

Parsing non-terminal: Number
Current token: Type(IntVal(3))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: String
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTOne"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: String
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTTwo"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(6))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(1))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Int)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(IntVal(3))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Int)
                    NonTerminal: VName
                      Symbol: Variable(VarName("INTOne"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(IntVal(0))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTTwo"))
                    NonTerminal: VarDeclP
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: Assignment
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTOne"))
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("a"))
                                  NonTerminal: StringP
                              NonTerminal: ArithExP
                                NonTerminal: ArithOp
                                  Symbol: Ops(Plus)
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("b"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTTwo"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    NonTerminal: ArithOpP
                                      Symbol: Ops(Times)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                                      NonTerminal: ArithOp
                                        Symbol: Ops(Plus)
                                      NonTerminal: ArithEx
                                        NonTerminal: ArithVal
                                          NonTerminal: String
                                            NonTerminal: VName
                                              Symbol: Variable(VarName("c"))
                                            NonTerminal: StringP
                                        NonTerminal: ArithExP
                                          NonTerminal: ArithOp
                                            NonTerminal: ArithOpP
                                              Symbol: Ops(Times)
                                          NonTerminal: ArithEx
                                            NonTerminal: ArithVal
                                              NonTerminal: Number
                                                Symbol: Type(IntVal(3))
                                            NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        Symbol: Utilities(Print)
                        Symbol: Scope(BracketL)
                        NonTerminal: Text
                          NonTerminal: TextElement
                            NonTerminal: String
                              NonTerminal: VName
                                Symbol: Variable(VarName("INTOne"))
                              NonTerminal: StringP
                          NonTerminal: TextTail
                        Symbol: Scope(BracketR)
                        Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTTwo"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: ControlFlow(Return)
                            NonTerminal: ReturnTail
                              NonTerminal: Number
                                Symbol: Type(IntVal(0))
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"INTOne": "int", "b": "int", "c": "int", "main": "int", "a": "int", "INTTwo": "int"}

--------------------
Processing node: NonTerminal(Prog)
Processing child 0 of StatementList: NonTerminal(FuncList)
Processing node: NonTerminal(FuncList)
Processing node: NonTerminal(FuncDecl)
Processing child 0 of StatementList: NonTerminal(Decl)
Processing node: NonTerminal(Decl)
Processing node: NonTerminal(Type)
Processing node: Terminal(Type(Int))
Processing node: NonTerminal(VName)
Processing node: Terminal(Variable(VarName("main")))
Processing child 1 of StatementList: Terminal(Scope(BracketL))
Processing node: Terminal(Scope(BracketL))
Processing child 2 of StatementList: NonTerminal(ListOfParams)
Processing node: NonTerminal(ListOfParams)
Processing child 3 of StatementList: Terminal(Scope(BracketR))
Processing node: Terminal(Scope(BracketR))
Processing child 4 of StatementList: Terminal(Scope(CurlyBracketL))
Processing node: Terminal(Scope(CurlyBracketL))
Processing child 5 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 6.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"b": ("int", 1.0), "a": ("int", 6.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"c": ("int", 3.0), "b": ("int", 1.0), "a": ("int", 6.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"b": ("int", 1.0), "a": ("int", 6.0), "INTOne": ("int", 0.0), "c": ("int", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"INTTwo": ("int", 0.0), "b": ("int", 1.0), "a": ("int", 6.0), "INTOne": ("int", 0.0), "c": ("int", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"INTTwo": ("int", 0.0), "b": ("int", 1.0), "a": ("int", 6.0), "INTOne": ("int", 7.0), "c": ("int", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"INTTwo": ("int", 60.0), "b": ("int", 1.0), "a": ("int", 6.0), "INTOne": ("int", 7.0), "c": ("int", 3.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 7
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 60
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: Terminal(ControlFlow(Return))
Processing node: NonTerminal(ReturnTail)
Processing node: NonTerminal(Number)
Processing node: Terminal(Type(IntVal(0)))
Processing node: Terminal(Scope(Semi))
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 6 of StatementList: Terminal(Scope(CurlyBracketR))
Processing node: Terminal(Scope(CurlyBracketR))
Processing node: NonTerminal(FuncList)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/Modulo
With text: 
int main() {
    /*This is a comment*/
    int a = 33;
    int b = 10;
    double c = 10.25;
    double d = 10.00;

    int INTRes = 0;
    double DOUBLERes = 0.0;

    INTRes = a % b;
    DOUBLERes = c % d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"33"
";"
"int"
"b"
"="
"10"
";"
"double"
"c"
"="
"10.25"
";"
"double"
"d"
"="
"10.00"
";"
"int"
"INTRes"
"="
"0"
";"
"double"
"DOUBLERes"
"="
"0.0"
";"
"INTRes"
"="
"a"
"%"
"b"
";"
"DOUBLERes"
"="
"c"
"%"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(33))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(33))

Parsing non-terminal: RelEx
Current token: Type(IntVal(33))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(33))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(33))

Parsing non-terminal: Number
Current token: Type(IntVal(33))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(10))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(10))

Parsing non-terminal: RelEx
Current token: Type(IntVal(10))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(10))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(10))

Parsing non-terminal: Number
Current token: Type(IntVal(10))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("10.25"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("10.00"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Modulo)

Parsing non-terminal: ArithExP
Current token: Ops(Modulo)

Parsing non-terminal: ArithOp
Current token: Ops(Modulo)

Parsing non-terminal: ArithOpP
Current token: Ops(Modulo)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("c"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("c"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Ops(Modulo)

Parsing non-terminal: ArithExP
Current token: Ops(Modulo)

Parsing non-terminal: ArithOp
Current token: Ops(Modulo)

Parsing non-terminal: ArithOpP
Current token: Ops(Modulo)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(33))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(10))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("10.25"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("10.00"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: Number
                                    Symbol: Type(DoubleVal("0.0"))
                                NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    NonTerminal: ArithOpP
                                      Symbol: Ops(Modulo)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("b"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("c"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      NonTerminal: ArithOpP
                                        Symbol: Ops(Modulo)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Successful!
Symbol Table: {"DOUBLERes": "double", "c": "double", "b": "int", "a": "int", "d": "double", "main": "int", "INTRes": "int"}

--------------------
Processing node: NonTerminal(Prog)
Processing child 0 of StatementList: NonTerminal(FuncList)
Processing node: NonTerminal(FuncList)
Processing node: NonTerminal(FuncDecl)
Processing child 0 of StatementList: NonTerminal(Decl)
Processing node: NonTerminal(Decl)
Processing node: NonTerminal(Type)
Processing node: Terminal(Type(Int))
Processing node: NonTerminal(VName)
Processing node: Terminal(Variable(VarName("main")))
Processing child 1 of StatementList: Terminal(Scope(BracketL))
Processing node: Terminal(Scope(BracketL))
Processing child 2 of StatementList: NonTerminal(ListOfParams)
Processing node: NonTerminal(ListOfParams)
Processing child 3 of StatementList: Terminal(Scope(BracketR))
Processing node: Terminal(Scope(BracketR))
Processing child 4 of StatementList: Terminal(Scope(CurlyBracketL))
Processing node: Terminal(Scope(CurlyBracketL))
Processing child 5 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": ("int", 33.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"b": ("int", 10.0), "a": ("int", 33.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"b": ("int", 10.0), "c": ("double", 10.25), "a": ("int", 33.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"c": ("double", 10.25), "b": ("int", 10.0), "a": ("int", 33.0), "d": ("double", 10.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"c": ("double", 10.25), "b": ("int", 10.0), "a": ("int", 33.0), "d": ("double", 10.0), "INTRes": ("int", 0.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"c": ("double", 10.25), "b": ("int", 10.0), "a": ("int", 33.0), "d": ("double", 10.0), "INTRes": ("int", 0.0), "DOUBLERes": ("double", 0.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"c": ("double", 10.25), "b": ("int", 10.0), "a": ("int", 33.0), "d": ("double", 10.0), "INTRes": ("int", 3.0), "DOUBLERes": ("double", 0.0)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
{"c": ("double", 10.25), "b": ("int", 10.0), "a": ("int", 33.0), "d": ("double", 10.0), "INTRes": ("int", 3.0), "DOUBLERes": ("double", 0.25)}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 3
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing print statement in node: NonTerminal(Statement)
Print value: 0.25
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: Terminal(ControlFlow(Return))
Processing node: NonTerminal(ReturnTail)
Processing node: NonTerminal(Number)
Processing node: Terminal(Type(IntVal(0)))
Processing node: Terminal(Scope(Semi))
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 6 of StatementList: Terminal(Scope(CurlyBracketR))
Processing node: Terminal(Scope(CurlyBracketR))
Processing node: NonTerminal(FuncList)

--------------------

Testing file: /home/matthew/Documents/UNI/Sem 6/SDL/Calctorio/TestSuite/InterpreterTests/SemanticFail
With text: 
int main() {
    /*This is a comment*/
    int a = 2;
    int b = 1;
    double c = 1.0;
    double d = 2.5;

    int INTRes = 0;
    double DOUBLERes = 0.0;
    
    INTRes = a + c;
    DOUBLERes = b + d;

    print(INTRes);
    print(DOUBLERes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"double"
"c"
"="
"1.0"
";"
"double"
"d"
"="
"2.5"
";"
"int"
"INTRes"
"="
"0"
";"
"double"
"DOUBLERes"
"="
"0.0"
";"
"INTRes"
"="
"a"
"+"
"c"
";"
"DOUBLERes"
"="
"b"
"+"
"d"
";"
"print"
"("
"INTRes"
")"
";"
"print"
"("
"DOUBLERes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("1.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("2.5"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Double)

Parsing non-terminal: Statement
Current token: Type(Double)

Parsing non-terminal: VarDecl
Current token: Type(Double)

Parsing non-terminal: Decl
Current token: Type(Double)

Parsing non-terminal: Type
Current token: Type(Double)

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: BoolEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: RelEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithEx
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithVal
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: Number
Current token: Type(DoubleVal("0.0"))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("c"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("c"))

Parsing non-terminal: String
Current token: Variable(VarName("c"))

Parsing non-terminal: VName
Current token: Variable(VarName("c"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("b"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("b"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("d"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("d"))

Parsing non-terminal: String
Current token: Variable(VarName("d"))

Parsing non-terminal: VName
Current token: Variable(VarName("d"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: String
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: VName
Current token: Variable(VarName("DOUBLERes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(2))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(1))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Double)
                  NonTerminal: VName
                    Symbol: Variable(VarName("c"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(DoubleVal("1.0"))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: VarDecl
                  NonTerminal: Decl
                    NonTerminal: Type
                      Symbol: Type(Double)
                    NonTerminal: VName
                      Symbol: Variable(VarName("d"))
                  NonTerminal: VarDeclP
                    Symbol: Ops(Assignment)
                    NonTerminal: Ex
                      NonTerminal: BoolEx
                        NonTerminal: RelEx
                          NonTerminal: ArithEx
                            NonTerminal: ArithVal
                              NonTerminal: Number
                                Symbol: Type(DoubleVal("2.5"))
                            NonTerminal: ArithExP
                          NonTerminal: RelExP
                        NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  NonTerminal: VarDecl
                    NonTerminal: Decl
                      NonTerminal: Type
                        Symbol: Type(Int)
                      NonTerminal: VName
                        Symbol: Variable(VarName("INTRes"))
                    NonTerminal: VarDeclP
                      Symbol: Ops(Assignment)
                      NonTerminal: Ex
                        NonTerminal: BoolEx
                          NonTerminal: RelEx
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              NonTerminal: ArithExP
                            NonTerminal: RelExP
                          NonTerminal: BoolExP
                    Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    NonTerminal: VarDecl
                      NonTerminal: Decl
                        NonTerminal: Type
                          Symbol: Type(Double)
                        NonTerminal: VName
                          Symbol: Variable(VarName("DOUBLERes"))
                      NonTerminal: VarDeclP
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: Number
                                    Symbol: Type(DoubleVal("0.0"))
                                NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                      Symbol: Scope(Semi)
                  NonTerminal: StatementList
                    NonTerminal: Statement
                      NonTerminal: Assignment
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        Symbol: Ops(Assignment)
                        NonTerminal: Ex
                          NonTerminal: BoolEx
                            NonTerminal: RelEx
                              NonTerminal: ArithEx
                                NonTerminal: ArithVal
                                  NonTerminal: String
                                    NonTerminal: VName
                                      Symbol: Variable(VarName("a"))
                                    NonTerminal: StringP
                                NonTerminal: ArithExP
                                  NonTerminal: ArithOp
                                    Symbol: Ops(Plus)
                                  NonTerminal: ArithEx
                                    NonTerminal: ArithVal
                                      NonTerminal: String
                                        NonTerminal: VName
                                          Symbol: Variable(VarName("c"))
                                        NonTerminal: StringP
                                    NonTerminal: ArithExP
                              NonTerminal: RelExP
                            NonTerminal: BoolExP
                        Symbol: Scope(Semi)
                    NonTerminal: StatementList
                      NonTerminal: Statement
                        NonTerminal: Assignment
                          NonTerminal: VName
                            Symbol: Variable(VarName("DOUBLERes"))
                          Symbol: Ops(Assignment)
                          NonTerminal: Ex
                            NonTerminal: BoolEx
                              NonTerminal: RelEx
                                NonTerminal: ArithEx
                                  NonTerminal: ArithVal
                                    NonTerminal: String
                                      NonTerminal: VName
                                        Symbol: Variable(VarName("b"))
                                      NonTerminal: StringP
                                  NonTerminal: ArithExP
                                    NonTerminal: ArithOp
                                      Symbol: Ops(Plus)
                                    NonTerminal: ArithEx
                                      NonTerminal: ArithVal
                                        NonTerminal: String
                                          NonTerminal: VName
                                            Symbol: Variable(VarName("d"))
                                          NonTerminal: StringP
                                      NonTerminal: ArithExP
                                NonTerminal: RelExP
                              NonTerminal: BoolExP
                          Symbol: Scope(Semi)
                      NonTerminal: StatementList
                        NonTerminal: Statement
                          Symbol: Utilities(Print)
                          Symbol: Scope(BracketL)
                          NonTerminal: Text
                            NonTerminal: TextElement
                              NonTerminal: String
                                NonTerminal: VName
                                  Symbol: Variable(VarName("INTRes"))
                                NonTerminal: StringP
                            NonTerminal: TextTail
                          Symbol: Scope(BracketR)
                          Symbol: Scope(Semi)
                        NonTerminal: StatementList
                          NonTerminal: Statement
                            Symbol: Utilities(Print)
                            Symbol: Scope(BracketL)
                            NonTerminal: Text
                              NonTerminal: TextElement
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("DOUBLERes"))
                                  NonTerminal: StringP
                              NonTerminal: TextTail
                            Symbol: Scope(BracketR)
                            Symbol: Scope(Semi)
                          NonTerminal: StatementList
                            NonTerminal: Statement
                              Symbol: ControlFlow(Return)
                              NonTerminal: ReturnTail
                                NonTerminal: Number
                                  Symbol: Type(IntVal(0))
                              Symbol: Scope(Semi)
                            NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Semantic Analysis Failed with Errors:
Type mismatch in assignment: variable 'INTRes' is of type 'int' but assigned type 'double'.

--------------------
