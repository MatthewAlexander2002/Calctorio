With text: 
int main() {
    /*This is a comment*/
    int a = 2;
    int b = 1;
    int INTRes = 0;

    INTRes = a + b;

    print(INTRes);

    return 0; 
}
"int"
"main"
"("
")"
"{"
"int"
"a"
"="
"2"
";"
"int"
"b"
"="
"1"
";"
"int"
"INTRes"
"="
"0"
";"
"INTRes"
"="
"a"
"+"
"b"
";"
"print"
"("
"INTRes"
")"
";"
"return"
"0"
";"
"}"
Parsing non-terminal: Prog
Current token: Type(Int)

Parsing non-terminal: FuncList
Current token: Type(Int)

Parsing non-terminal: FuncDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("main"))

Parsing non-terminal: ListOfParams
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(2))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(2))

Parsing non-terminal: RelEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(2))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(2))

Parsing non-terminal: Number
Current token: Type(IntVal(2))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(1))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(1))

Parsing non-terminal: RelEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(1))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(1))

Parsing non-terminal: Number
Current token: Type(IntVal(1))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Type(Int)

Parsing non-terminal: Statement
Current token: Type(Int)

Parsing non-terminal: VarDecl
Current token: Type(Int)

Parsing non-terminal: Decl
Current token: Type(Int)

Parsing non-terminal: Type
Current token: Type(Int)

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VarDeclP
Current token: Ops(Assignment)

Parsing non-terminal: Ex
Current token: Type(IntVal(0))

Parsing non-terminal: BoolEx
Current token: Type(IntVal(0))

Parsing non-terminal: RelEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithEx
Current token: Type(IntVal(0))

Parsing non-terminal: ArithVal
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Statement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Assignment
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: Ex
Current token: Variable(VarName("a"))

Parsing non-terminal: BoolEx
Current token: Variable(VarName("a"))

Parsing non-terminal: RelEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithEx
Current token: Variable(VarName("a"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("a"))

Parsing non-terminal: String
Current token: Variable(VarName("a"))

Parsing non-terminal: VName
Current token: Variable(VarName("a"))

Parsing non-terminal: StringP
Current token: Ops(Plus)

Parsing non-terminal: ArithExP
Current token: Ops(Plus)

Parsing non-terminal: ArithOp
Current token: Ops(Plus)

Parsing non-terminal: ArithEx
Current token: Variable(VarName("b"))

Parsing non-terminal: ArithVal
Current token: Variable(VarName("b"))

Parsing non-terminal: String
Current token: Variable(VarName("b"))

Parsing non-terminal: VName
Current token: Variable(VarName("b"))

Parsing non-terminal: StringP
Current token: Scope(Semi)

Parsing non-terminal: ArithExP
Current token: Scope(Semi)

Parsing non-terminal: RelExP
Current token: Scope(Semi)

Parsing non-terminal: BoolExP
Current token: Scope(Semi)

Parsing non-terminal: StatementList
Current token: Utilities(Print)

Parsing non-terminal: Statement
Current token: Utilities(Print)

Parsing non-terminal: Text
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: TextElement
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: String
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: VName
Current token: Variable(VarName("INTRes"))

Parsing non-terminal: StringP
Current token: Scope(BracketR)

Parsing non-terminal: TextTail
Current token: Scope(BracketR)

Parsing non-terminal: StatementList
Current token: ControlFlow(Return)

Parsing non-terminal: Statement
Current token: ControlFlow(Return)

Parsing non-terminal: ReturnTail
Current token: Type(IntVal(0))

Parsing non-terminal: Number
Current token: Type(IntVal(0))

Parsing non-terminal: StatementList
Current token: Scope(CurlyBracketR)

Parsing non-terminal: FuncList
Current token: EOF

Parse successful:
NonTerminal: Prog
  NonTerminal: FuncList
    NonTerminal: FuncDecl
      NonTerminal: Decl
        NonTerminal: Type
          Symbol: Type(Int)
        NonTerminal: VName
          Symbol: Variable(VarName("main"))
      Symbol: Scope(BracketL)
      NonTerminal: ListOfParams
      Symbol: Scope(BracketR)
      Symbol: Scope(CurlyBracketL)
      NonTerminal: StatementList
        NonTerminal: Statement
          NonTerminal: VarDecl
            NonTerminal: Decl
              NonTerminal: Type
                Symbol: Type(Int)
              NonTerminal: VName
                Symbol: Variable(VarName("a"))
            NonTerminal: VarDeclP
              Symbol: Ops(Assignment)
              NonTerminal: Ex
                NonTerminal: BoolEx
                  NonTerminal: RelEx
                    NonTerminal: ArithEx
                      NonTerminal: ArithVal
                        NonTerminal: Number
                          Symbol: Type(IntVal(2))
                      NonTerminal: ArithExP
                    NonTerminal: RelExP
                  NonTerminal: BoolExP
            Symbol: Scope(Semi)
        NonTerminal: StatementList
          NonTerminal: Statement
            NonTerminal: VarDecl
              NonTerminal: Decl
                NonTerminal: Type
                  Symbol: Type(Int)
                NonTerminal: VName
                  Symbol: Variable(VarName("b"))
              NonTerminal: VarDeclP
                Symbol: Ops(Assignment)
                NonTerminal: Ex
                  NonTerminal: BoolEx
                    NonTerminal: RelEx
                      NonTerminal: ArithEx
                        NonTerminal: ArithVal
                          NonTerminal: Number
                            Symbol: Type(IntVal(1))
                        NonTerminal: ArithExP
                      NonTerminal: RelExP
                    NonTerminal: BoolExP
              Symbol: Scope(Semi)
          NonTerminal: StatementList
            NonTerminal: Statement
              NonTerminal: VarDecl
                NonTerminal: Decl
                  NonTerminal: Type
                    Symbol: Type(Int)
                  NonTerminal: VName
                    Symbol: Variable(VarName("INTRes"))
                NonTerminal: VarDeclP
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: Number
                              Symbol: Type(IntVal(0))
                          NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                Symbol: Scope(Semi)
            NonTerminal: StatementList
              NonTerminal: Statement
                NonTerminal: Assignment
                  NonTerminal: VName
                    Symbol: Variable(VarName("INTRes"))
                  Symbol: Ops(Assignment)
                  NonTerminal: Ex
                    NonTerminal: BoolEx
                      NonTerminal: RelEx
                        NonTerminal: ArithEx
                          NonTerminal: ArithVal
                            NonTerminal: String
                              NonTerminal: VName
                                Symbol: Variable(VarName("a"))
                              NonTerminal: StringP
                          NonTerminal: ArithExP
                            NonTerminal: ArithOp
                              Symbol: Ops(Plus)
                            NonTerminal: ArithEx
                              NonTerminal: ArithVal
                                NonTerminal: String
                                  NonTerminal: VName
                                    Symbol: Variable(VarName("b"))
                                  NonTerminal: StringP
                              NonTerminal: ArithExP
                        NonTerminal: RelExP
                      NonTerminal: BoolExP
                  Symbol: Scope(Semi)
              NonTerminal: StatementList
                NonTerminal: Statement
                  Symbol: Utilities(Print)
                  Symbol: Scope(BracketL)
                  NonTerminal: Text
                    NonTerminal: TextElement
                      NonTerminal: String
                        NonTerminal: VName
                          Symbol: Variable(VarName("INTRes"))
                        NonTerminal: StringP
                    NonTerminal: TextTail
                  Symbol: Scope(BracketR)
                  Symbol: Scope(Semi)
                NonTerminal: StatementList
                  NonTerminal: Statement
                    Symbol: ControlFlow(Return)
                    NonTerminal: ReturnTail
                      NonTerminal: Number
                        Symbol: Type(IntVal(0))
                    Symbol: Scope(Semi)
                  NonTerminal: StatementList
      Symbol: Scope(CurlyBracketR)
    NonTerminal: FuncList

--------------------
Processing node: NonTerminal(Prog)
Processing child 0 of StatementList: NonTerminal(FuncList)
Processing node: NonTerminal(FuncList)
Processing node: NonTerminal(FuncDecl)
Processing child 0 of StatementList: NonTerminal(Decl)
Processing node: NonTerminal(Decl)
Processing node: NonTerminal(Type)
Processing node: Terminal(Type(Int))
Processing node: NonTerminal(VName)
Processing node: Terminal(Variable(VarName("main")))
Processing child 1 of StatementList: Terminal(Scope(BracketL))
Processing node: Terminal(Scope(BracketL))
Processing child 2 of StatementList: NonTerminal(ListOfParams)
Processing node: NonTerminal(ListOfParams)
Processing child 3 of StatementList: Terminal(Scope(BracketR))
Processing node: Terminal(Scope(BracketR))
Processing child 4 of StatementList: Terminal(Scope(CurlyBracketL))
Processing node: Terminal(Scope(CurlyBracketL))
Processing child 5 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"a": 2.0}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"b": 1.0, "a": 2.0}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(VarDecl)
{"b": 1.0, "a": 2.0, "INTRes": 0.0}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: NonTerminal(Assignment)
0.0
0.0
0.0
0.0
{"b": 1.0, "INTRes": 0.0, "a": 2.0}
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: Terminal(Utilities(Print))
Processing node: Terminal(Scope(BracketL))
Processing node: NonTerminal(Text)
Processing node: NonTerminal(TextElement)
Processing node: NonTerminal(String)
Processing node: NonTerminal(VName)
Processing node: Terminal(Variable(VarName("INTRes")))
Processing node: NonTerminal(StringP)
Processing node: NonTerminal(TextTail)
Processing node: Terminal(Scope(BracketR))
Processing node: Terminal(Scope(Semi))
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 0 of StatementList: NonTerminal(Statement)
Processing node: NonTerminal(Statement)
Processing node: Terminal(ControlFlow(Return))
Processing node: NonTerminal(ReturnTail)
Processing node: NonTerminal(Number)
Processing node: Terminal(Type(IntVal(0)))
Processing node: Terminal(Scope(Semi))
Processing child 1 of StatementList: NonTerminal(StatementList)
Processing node: NonTerminal(StatementList)
Processing child 6 of StatementList: Terminal(Scope(CurlyBracketR))
Processing node: Terminal(Scope(CurlyBracketR))
Processing node: NonTerminal(FuncList)

--------------------
